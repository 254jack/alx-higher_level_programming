#Test cases for add_integer function
===========================
Using 0-add_integer.py
===========================

This module defines an integer addition function ``add_integer(a, b=98)``.

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 3)
    5

    >>> add_integer(2, -3)
    -1

Working with floating-point values.

    >>> add_integer(2.0, 3.0)
    5

    >>> add_integer(2.9, 0.2)
    2

    >>> add_integer(-2.9, -0.2)
    -2

combining floating and non-floating point values.

    >>> add_integer(2.3, -3)
    -1

The second argument is optional - defaulted to 98.

    >>> add_integer(2)
    100

Non-Numbers
===========

TypeError will be raised if non-numbers values are raised:

    >>> add_integer("ALX", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(2, "School")
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
